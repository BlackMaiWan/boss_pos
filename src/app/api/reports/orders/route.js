// app/api/reports/orders/route.js (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
import { NextResponse } from "next/server";
import { connectMongoDB } from "../../../../../lib/mongodb";
import Order from "../../../../../models/Order";

export async function GET(req) {
  try {
    await connectMongoDB();

    const url = new URL(req.url);
    const filter = url.searchParams.get('filter') || 'daily';
    const startDateParam = url.searchParams.get('startDate'); 
    const endDateParam = url.searchParams.get('endDate');   
    
    let dateFilter = {};

    if (startDateParam && endDateParam) {
        const startDate = new Date(startDateParam);
        const endDate = new Date(endDateParam);
        
        // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° 1 ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô EndDate ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ñ‡∏∂‡∏á‡∏™‡∏¥‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        endDate.setDate(endDate.getDate() + 1); 

        dateFilter = { 
            $gte: startDate, // ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö Start Date
            $lt: endDate     // ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ End Date (‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å 1 ‡∏ß‡∏±‡∏ô)
        };
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'paid' ‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const query = {
        payment_status: 'paid',
        ...(Object.keys(dateFilter).length > 0 && { createdAt: dateFilter })
    };

    // üí° FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏° .select() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü
    const orders = await Order.find(query)
      .select('tableNumber total_amount createdAt payment_method') // <--- ‡πÄ‡∏û‡∏¥‡πà‡∏° payment_method ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      .sort({ createdAt: -1 });

    return NextResponse.json(orders, { status: 200 });
  } catch (error) {
    console.error('Error fetching reports:', error);
    return NextResponse.json({ message: "Internal Server Error" }, { status: 500 });
  }
}